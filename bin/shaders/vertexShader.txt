#version 400 core // GLSL version

in vec3 position; // position of vertex from VAO attribute list 0
in vec2 textureCoords; // textureCoords from VAO attribute list 1
in vec3 normal; // normals from VAO attribute list 2

out vec2 pass_textureCoords;
out vec3 surfaceNormal;
out vec3 toLightVector;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition;

void main(void) { // runs everytime a vertex is processed by this vertexShader
	// tell OpenGL where to render this vertex on the screen
	vec4 worldPosition = transformationMatrix * vec4(position, 1.0); // world position of vertex after it's been transformed (translated, rotated, or scaled)
	
	gl_Position = projectionMatrix * viewMatrix * worldPosition; // same as position from VAO
	
	pass_textureCoords = textureCoords; // same as textureCoords from VAO, so they will be linearly interpolated
	
	surfaceNormal = (transformationMatrix * vec4(normal, 0.0)).xyz; // need vec4 to multiply with transformationMatrix (surface normal may change change if vertex is translated, rotated, or scaled)
	
	toLightVector = lightPosition - worldPosition.xyz; // vector from light source to vertex
}