#version 400 core // GLSL version

in vec2 pass_textureCoords; // input of fragmentShader is output of vertexShader
in vec3 surfaceNormal;
in vec3 toLightVector;

out vec4 out_Color; // color of pixel currently being processed

uniform sampler2D textureSampler; // represents texture we will be using
uniform vec3 lightColour;

void main(void) {
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	float nDot1 = dot(unitNormal, unitLightVector); // dot product between normalized surfaceNormal and toLightVector, which indicates brightness of vertex
	float brightness = max(nDot1, 0.0); // if nDot1 < 0, brightness = 0 (gets rid of negative dot product, if surfaceNormal and toLightVector point in opposite directions, brightness = 0)
	vec3 diffuse = brightness * lightColour;
	out_Color = vec4(diffuse, 1.0) * texture(textureSampler, pass_textureCoords); // texture(...) is a GLSL method, samples given texture in sampler2D, returns color of pixel on texture at textureCoords
}